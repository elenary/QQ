---
format:
  html:
    theme: cosmo
    self-contained: true
---

#  Introduction to Data Analysis in R

This book is written using the R programming and data processing language and the Bookdown package in the RStudio data science environment.

To start working in it, you need to download and install the R language itself <https://cran.r-project.org/> and download and install RStudio, the environment for work <https://posit.co/downloads/> .

## 14.1 Data and variables

**Data** is information presented in a form suitable for storage and processing by humans or information systems (ISO/IEC/IEEE 24765-2010). If data is presented in a form suitable for processing by information systems, it is formalized.

**A variable** is a shell that we define to store data in it and perform operations on it. A variable has *a name* and the *data* that it stores.

<p align="center"> 
```{r eval=TRUE, echo = FALSE, message = FALSE, fig.align = 'center', out.width="80%"}
knitr::include_graphics("images/variable.png")
```
</p>

### 14.1.1 Basic data types

-   **Numeric** (whole numbers – **integer** or **numeric** , real numbers – **real** , floating point numbers (fractional) – **float** )

-   **Text** ( **character** , if one character, or **string** – many characters)

-   **Logical** ( **logical** or **boolean** – accepts only True / False values)

-   **NA** – missing values ​​(not available)

-   **NaN** – not a number, the result of performing an impossible numerical operation (for example, division by 0)

### 14.1.2 Basic data structures

-   **Vector** – a one-dimensional array of one data type

-   **An array** is a multidimensional array of one data type, consisting of vectors of the same length.

-   **Matrix** - a two-dimensional array of only numeric data

-   **A list** is essentially a multidimensional array, but can consist of vectors of different lengths and have data of different types.

-   **Data, dataframe** - essentially a list, but all vectors are the same length

<p align="center"> 
```{r eval=TRUE, echo = FALSE, message = FALSE, fig.align = 'center', out.width="80%"}
knitr::include_graphics("images/arrays.png")
```
https://practicum.yandex.ru/blog/10-osnovnyh-struktur-dannyh/
</p><https://practicum.yandex.ru/blog/10-osnovnyh-struktur-dannyh/>

## 14.2 Operations with variables and functions

Depending on what type of variables we are working with, we can perform different operations on them.

**An operation** is the execution of some action on data. What performs this action is called **an operator** or **a function** . The difference between them is that an operator performs atomic (single and simple actions), for example, an operator can be a sign of addition, division, greater than or less than, etc. A function does more complex actions: for example, create a vector using the function `c()`, read data using the function `read_csv()`, filter data using the function `select()`. Note that when calling a function, its name is always followed by parentheses.

| **Data type** | **Possible atomic operations** |
|----|----|
| Numerical | = (assignment), +, -, /, \*, % |
| Text | = (assignment),+ (concatenation), search for a specific character |
| Logical | = (assignment),\>, \<, == (equal), != (not equal) |

```{r eval=TRUE, echo = TRUE, message = FALSE}
# vectors  -------------------------------------------------------
c(1, 2, 3, 4, 5) # c() -- это  функция, которая создает вектор, вне зависимости от типа данных

# numeric vectors  -------------------------------------------------------
c(1, 2, 3, 4, 5, 7, 21, 143)

vector1 <- c(1, 2, 3, 4, 5) # vector1 -- variable name, 1, 2, 3, 4, 5 -- arguments of function с()

age <- c(18, 22, 25, 20, 21)

1:10 # function : creates vector from 1 to 10 with step 1
10:1

seq(2, 10, 2) # функция seq() создает числовой вектор-перечисление значений от 2 до 10 с шагом 2 
seq(1, 10, 2) # функция seq() создает числовой вектор-перечисление значений от 1 до 10 с шагом 2

# Character vector -------------------------------------------------------

answers <- c("no", "yes", "yes", "yes", "no")

#пример приведения типов -- TRUE и FALSE превратились в 1 и 0
c(1, 2, 3, 4, 5, TRUE, FALSE)
c(1, 2, 3, 4, 5, "1", "0")

# Logical vectors ------------------------------------------------------

condition <- c(TRUE, FALSE, TRUE, TRUE, FALSE) #Logical vector

#примеры приведения типов, когда в векторе встречаются разные типы данных -- R приводит их к одному
c(1, 2, 3, 4, TRUE, FALSE)
c(1, 2, 3, 4, 5, 6)
c(1, 10, 3, -4, "зеленый", "карий")

# Logical expressii=ons ------------------------------------------------------

a <- 5
b <- 10

a > b
a >= b
a == b
a != b
a <= b
a < b

#функция, которая выполняет действия в зависимости от условия ...если ... то:
# ifelse() содержит 3 аргумента: ( условие; что делать, если условие верно;
# что делать, если условие ложно)

ifelse(a < b, a+b, "а не меньше b")


# датафрейм ---------------------------------------------------------------

eye_color <- c("green", "brown", "grey", "blue", "red")
  
data <- data.frame(vector1, age, answers, condition, eye_color) #функция data.frame() создает датафрейм (табличку с данными) из существующих векторов
View(data) # функция View() открвает эту табличку в отдельной вкладке (то же, что и по клику иконки в окне Environment)

data$age # отбираем колонку из датафрейма: название_датафрейма$название_колонки

# описательные визуализации
hist(data$age, breaks = c(18, 22, 27))
lines(density(data$age)) #добавляет график плотности вероятности на гистограмму

?hist
plot(density(data$age))

# описательные статистики
mean(data$age)
sd(data$age)
round(sd(data$age),1) #округляет до 1 цифры после запятой

min(data$age)
max(data$age)
range(data$age)
summary(data$age)
```

## 14.3 Getting Started in the Environment

In this tutorial I will provide tasks for training in any data working environment and code for working with data in R.

For most interesting operations in R, we will need additional packages - a set of functions that someone has already written for us (the same as, for example, `import numpy as np`in Python). We will mainly need the package `tidyverse`, literally - "the universe of clean data". Let me say right away that everything marked with the \# symbol is comments, our hints that will not be executed. It is important to leave them for yourself, so as not to forget what is happening here.

For the package to work, it needs to be 1. installed and 2. connected

```{r eval=FALSE, echo = TRUE, message = FALSE}
# устанавливаем пакет
install.packages("tidyverse")
```

```{r eval=TRUE, echo = TRUE, message = FALSE}
# подключаем пакет
library(tidyverse)
```

You only need to install the package once after installing R, `library`you always need to connect via when you open RStudio. An error like “could not find function” in 99% of cases indicates that the package from which it is used is not connected.

## 14.4 Getting Started with Data

We will work with the World Happiness Report data for 2016 <https://www.kaggle.com/datasets/unsdsn/world-happiness> . This is the World Happiness Report <https://en.wikipedia.org/wiki/World_Happiness_Report> , which shows how residents of different countries rate their level of happiness. They can also be downloaded from the link <https://raw.githubusercontent.com/elenary/StatsForDA/main/2016.csv> (right-click in the opened file - Save as). The 2016 data we will work with includes 157 countries. *By the way, can you download data for different years and see how the number of participating countries changed? A little later we will learn how to do this using code* . There are the following variables here:

-   Happiness Rank - position in the ranking

-   Happiness Score - the absolute value of the happiness score

-   SE - standard error

-   Economy - GDP per capita

-   Family - Social support, feeling of family

-   Health - Life expectancy

-   Freedom - Freedom

-   Trust (Goverment Corruption) - perceived level of corruption

-   Generosity - how much is donated to charity

-   Dystopia is a dystopian country with the lowest indicators in all existing parameters.

Economy, Family, Health, Freedom, Trust, Generosity – 6 indicators by which the level of happiness is calculated.

To perform operations with data, they first need to *be read* , loaded into the data working environment. In modern traditions of R, this is easiest to do using a function `read_csv()`from the package `tidyverse`. Do not forget that any function call is accompanied by parentheses, into which arguments are passed. In the function `read_csv()`in parentheses, you need to pass the path to the file that we want to read. It can be copied through the file properties. But in order not to bother with the path, the easiest way is to put the data file in the same folder where our file with the code itself is located (for this, you need to save it). And the most elegant and commonly used solution is to create a project File - New Project, and store all files in the project folder, this saves from a large number of errors. Importing files is described in great detail by Ivan Pozdnyakov <https://pozdniakov.github.io/tidy_stats/030-import_data.html>

```{r eval=TRUE, echo = TRUE, message = FALSE}

whr <- read_csv("2016.csv") # читаем данные 

View(whr) # просматриваем, что получилось передать в объект с названием whr 
```

Now I want to explore this data. Remember how we start exploring data? With [descriptive statistics](https://elenary.github.io/StatsForDA/descriptives)

I can select all the variables one by one and calculate the mean and standard deviation for them – this is what is in the Descriptives tab in Jamovi. Since the column does not exist in a vacuum, but inside a dataset, we need to somehow indicate that we are interested in a specific column inside a specific dataset. For now, the easiest way to do this is with the icon `$`:

```{r eval=TRUE, echo = TRUE, message = FALSE}       
whr$Family # отбираем всю колонку 
```

Or we can remember that a data frame has two dimensions, like [a two-dimensional array](https://elenary.github.io/StatsForDA/data_structures) , and we can access it by index (in square brackets): row number (first number) and column number (second number). If we are not interested in a specific row, but all rows, then nothing is put in place of this index, as if we are skipping it.

```{r eval=TRUE, echo = TRUE, message = FALSE}
whr[,8] # отбираем всю колонку другим способом
```

Pay attention to the output: what data structures do you think the results of the first and second methods belong to?

Let's calculate the mean and standard deviation for this column.

```{r eval=TRUE, echo = TRUE, message = FALSE}  
mean(whr$Family) # среднее
```

```{r eval=TRUE, echo = TRUE, message = FALSE}      
sd(whr$Family) # стандартное отклонение
```

## Tasks after seminar

1.  Read the 2016 WHR data in the environment you are working in (in R, use the function `read_csv()`from the package `tidyverse`).

2.  Calculate the mean, standard deviation, median, and range (spread from maximum to minimum value) for all 6 indicators that make up the level of happiness (Economy, Family, Health, Freedom, Trust, Generosity). What can you say about them? Where is the largest range? Where are the mean and median close to each other, and where are they not so close? *(To calculate the median and range in R, you will need to learn to google a little or use other materials)*

3.  Plot a histogram and a probability density plot for all 6 indicators that make up the level of happiness.
